{"version":3,"sources":["components/InfiniteScrollListStyle.js","components/InfiniteScrollList.js","App.js","reportWebVitals.js","index.js"],"names":["InfiniteScrollContainer","styled","div","CommentContainer","CommentBox","CommentDetail","InfiniteScrollList","useState","comments","setComments","pageNumber","setPageNumber","loading","setLoading","fetchComments","a","fetch","res","json","data","p","useEffect","pageEnd","useRef","num","observer","IntersectionObserver","entries","isIntersecting","loadMore","unobserve","current","threshold","observe","prevPageNumber","map","comment","index","id","email","body","ref","container","display","flexDirection","alignItems","justifyContent","App","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAEaA,EAA0BC,IAAOC,IAAV,kDAIvBC,EAAmBF,IAAOC,IAAV,4QAchBE,EAAaH,IAAOC,IAAV,oMAeVG,EAAgBJ,IAAOC,IAAV,uL,OCsCXI,MAjEf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAa,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,sEACFC,MAAM,uDAAD,OACkCN,EADlC,eADH,cACdO,EADc,gBAIDA,EAAIC,OAJH,OAIdC,EAJc,OAKpBV,GAAY,SAACW,GAAD,4BAAWA,GAAX,YAAiBD,OAC7BN,GAAW,GANS,2CAAH,sDASnBQ,qBAAU,WACRP,EAAcJ,KACb,CAACA,IAEJ,IAAMY,EAAUC,mBAEZC,EAAM,EAEVH,qBAAU,WACR,GAAIT,EAAS,CACX,IAAMa,EAAW,IAAIC,sBACnB,SAACC,GACKA,EAAQ,GAAGC,iBACbJ,IACAK,IACIL,GAAO,IAAIC,EAASK,UAAUR,EAAQS,YAG9C,CAAEC,UAAW,IAEfP,EAASQ,QAAQX,EAAQS,YAE1B,CAACnB,EAASY,IAEb,IAAMK,EAAW,WACflB,GAAc,SAACuB,GAAD,OAAoBA,EAAiB,MAGrD,OACE,eAAClC,EAAD,WACGQ,EAAS2B,KAAI,SAACC,EAASC,GAAV,OACZ,eAAClC,EAAD,WACE,eAACC,EAAD,WACE,6CACA,+BAAOgC,EAAQE,QAEjB,eAAClC,EAAD,WACE,wCACA,+BAAOgC,EAAQG,WAEjB,eAAClC,EAAD,WACE,0CACA,4BAAI+B,EAAQI,YAXOH,MAezB,qBAAKI,IAAKnB,QCjEVoB,EAAY,CAChBC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UAWHC,MARf,WACE,OACE,qBAAKC,MAAON,EAAZ,SACE,cAAC,EAAD,OCDSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d07fc1f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const InfiniteScrollContainer = styled.div`\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport const CommentContainer = styled.div`\r\n  width: 500px;\r\n  height: 193px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 20px;\r\n  background: #f8f9fa;\r\n  margin: 20px auto;\r\n  border: 0.5px solid #ced4da;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  color: #212529;\r\n`;\r\n\r\nexport const CommentBox = styled.div`\r\n  display: flex;\r\n  font-size: 18px;\r\n  line-height: 21px;\r\n  padding: 12px 0;\r\n\r\n  & > div {\r\n    font-weight: 600;\r\n  }\r\n\r\n  & > span {\r\n    margin-left: 12px;\r\n  }\r\n`;\r\n\r\nexport const CommentDetail = styled.div`\r\n  font-size: 18px;\r\n  line-height: 21px;\r\n  padding-top: 12px;\r\n\r\n  & > div {\r\n    font-weight: 600;\r\n  }\r\n\r\n  & > p {\r\n    margin-block-start: 2px;\r\n  }\r\n`;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  CommentContainer,\r\n  CommentBox,\r\n  InfiniteScrollContainer,\r\n  CommentDetail,\r\n} from './InfiniteScrollListStyle';\r\n\r\nfunction InfiniteScrollList() {\r\n  const [comments, setComments] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchComments = async (pageNumber) => {\r\n    const res = await fetch(\r\n      `https://jsonplaceholder.typicode.com/comments?_page=${pageNumber}&_limit=10`,\r\n    );\r\n    const data = await res.json();\r\n    setComments((p) => [...p, ...data]);\r\n    setLoading(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchComments(pageNumber);\r\n  }, [pageNumber]);\r\n\r\n  const pageEnd = useRef();\r\n\r\n  let num = 1;\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      const observer = new IntersectionObserver(\r\n        (entries) => {\r\n          if (entries[0].isIntersecting) {\r\n            num++;\r\n            loadMore();\r\n            if (num >= 50) observer.unobserve(pageEnd.current);\r\n          }\r\n        },\r\n        { threshold: 1 },\r\n      );\r\n      observer.observe(pageEnd.current);\r\n    }\r\n  }, [loading, num]);\r\n\r\n  const loadMore = () => {\r\n    setPageNumber((prevPageNumber) => prevPageNumber + 1);\r\n  };\r\n\r\n  return (\r\n    <InfiniteScrollContainer>\r\n      {comments.map((comment, index) => (\r\n        <CommentContainer key={index}>\r\n          <CommentBox>\r\n            <div>Comment Id</div>\r\n            <span>{comment.id}</span>\r\n          </CommentBox>\r\n          <CommentBox>\r\n            <div>Email</div>\r\n            <span>{comment.email}</span>\r\n          </CommentBox>\r\n          <CommentDetail>\r\n            <div>Comment</div>\r\n            <p>{comment.body}</p>\r\n          </CommentDetail>\r\n        </CommentContainer>\r\n      ))}\r\n      <div ref={pageEnd}></div>\r\n    </InfiniteScrollContainer>\r\n  );\r\n}\r\n\r\nexport default InfiniteScrollList;\r\n","import React from 'react';\nimport InfiniteScrollList from './components/InfiniteScrollList';\n\nconst container = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n};\n\nfunction App() {\n  return (\n    <div style={container}>\n      <InfiniteScrollList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}